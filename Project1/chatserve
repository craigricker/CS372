#!/bin/python
"""
    ProgramName:        chatserve
    Author:             Craig Ricker
    Course Name:        CS372 Intro to Computer Networks
    Last Modified:      May 5th, 2019
    Description:

    This program acts as the server end of a simple two way chat program.
    Utilizing sockets API, it listens on a port passed as the first commmand line argument
    Once chat is initiated, the users take turn sending messages to one another.
    If either user sends "\quit" the chat will be terminated.
    This server, however, will remain active listening for another connection

"""
import socket
import sys
import signal


def send_message(user_name, conn):
    """
    Using connection created by socket API, prompts user for a message, and then sends it
    through the connection.
    Pre conditions: user_name must be valid text and conn must be active two way socket powered connection
    Post conditions: Message is sent, if user types \quit it will return false, otherwise true
    :param user_name:   Username to be included for prompt and sent message
    :param conn:        Connection to send message on
    :return:            T/F if the user wants to continue the chat conversation
    """
    # Use username to prompt and include in sent message
    to_send = user_name + "> " + input(user_name + "> ")
    # Must encode string to be sent, need simple data type
    conn.sendall(to_send.encode())
    if '\quit' in to_send:
        return False
    else:
        return True


def receive_messsage(conn):
    """
    Through connection created by socket API, receives messages on passed connection (conn) and then displays
    to the user.
    If the message contains "\quit" return False, other wise return true.
    Pre conditions: conn must be active two way socket powered connection
    Post conditions: Message is sent, if user types \quit it will return false, otherwise true
    :param conn:    Connection to receive message from
    :return:        T/F if other user wishes to continue conversation
    """
    data = conn.recv(1024)
    # Decode message so appears as normal text
    data = data.decode('ascii')
    if '\quit' in data:
        return False
    else:
        print(data)
        return True

def setup_socket(port):
    """
    Starts listening for connection on specificed port number
    This code is adapted from socket API documentation
    Pre conditions: port must be a valid port number that is not currently in use
    Post condition: initates two way connection to port and returns connection
    :param port:    port to listen for connection
    :return:        created socket
    """
    HOST = ''  # Symbolic name meaning all available interfaces
    my_socket =  socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    my_socket.bind((HOST, port))
    my_socket.listen(1)
    return my_socket

if __name__ == '__main__':
    # Check user input is correct format
    if len(sys.argv) != 2:
        print("Script format: python chatserve.py PORTNUMBER")
        exit(-1)
    else:
        port = int(sys.argv[1])

    # Prompt for username
    user_name = "F" * 12
    while len(user_name) > 10 or "\quit" in user_name:
        if "\quit" in user_name:
            print("You cannot include \quit as part of your username")
        user_name = input("Please select a user name 10 digits or less")

    # Start up with port passed in through command line
    my_socket = setup_socket(port)


    def sigint_handler(*args):
        """
        handler for SIGINT - done within scope to provide access to socket, this way
        the handler can correctly close the connection
        Pre condition: program receives SIGINT signal
        Post condition: cleans up connection and exits successfully
        :param args:    None used
        :return:        None
        """
        my_socket.close()
        print("Closing connections and shutting down gracefully")
        exit(0)

    # Register handler to exit graefully
    signal.signal(signal.SIGINT, sigint_handler)

    # Repeatedly wait for chat participant
    while True:
        print("Waiting for chat participant...")
        conn, addr = my_socket.accept()
        # Initial connection, establish as peers
        data = conn.recv(1024)
        print("{} has joined the chat.".format(data.decode()))
        # Send and receive messages until one user indicates they are done chatting
        while (receive_messsage(conn)):
            if not send_message(user_name, conn):
                break



